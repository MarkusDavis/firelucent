{"version":3,"sources":["components/TextInput/TextInput.js","pages/Login.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","overrides","MuiOutlinedInput","root","border","transitionDuration","color","height","MuiInputLabel","shrink","transform","input","padding","useStyles","makeStyles","backgroundColor","useLabelStyles","TextInput","React","props","ref","classes","labelClasses","fullWidth","inputComponent","label","labelText","labelWidth","multiline","type","notched","other","value","margin","variant","InputProps","InputLabelProps","Login","handleSignin","e","preventDefault","setError","setLoading","email","emailRef","current","password","passwordRef","signin","then","id","history","push","catch","error","message","useHistory","useContext","FirebaseContext","firebase","useRef","useState","useAuth","facebookLogin","useEffect","document","title","initialValues","validate","values","errors","test","length","onSubmit","formik","handleChange","handleSubmit","touched","handleBlur","isValid","dirty","className","width","fill","name","inputPlaceholder","autoFocus","inputType","inputRef","onChange","onBlur","formHelperText","inputRequired","to"],"mappings":"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","file":"static/js/12.53c00e14.chunk.js","sourcesContent":["// styles\nimport { FormControl, InputBase } from \"@material-ui/core\";\nimport { Input, TextField } from \"@material-ui/core\";\nimport * as React from \"react\";\n\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  makeStyles,\n} from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#fa100a\",\n    },\n    secondary: {\n      light: \"#0066ff\",\n      main: \"#fff \",\n\n      contrastText: \"#ffcc00\",\n    },\n  },\n  overrides: {\n    MuiOutlinedInput: {\n      root: {\n        \"&:hover:not($disabled):not($focused):not($error) $notchedOutline\": {\n          border: \"2px solid var(--primary)\",\n          transitionDuration: \".3s\",\n          color: 'var(--primary)',\n          height: \"90\"\n        },\n      },\n    },\n    MuiInputLabel: {\n      shrink: {\n        transform: \"translate(8px, 8px) scale(0.75) !important\",\n      },\n    },\n    input: { padding: \"10px 14px\" },          height: \"90\"\n  },\n});\nconst useStyles = makeStyles({\n  root: {\n    color: \"var(--textColor)\",\n    backgroundColor: \"var(--input-bg) !important\",\n    \"&.Mui-focused\": {\n      color: \"var(--textColor)\",\n    },\n  },\n  input: {\n    \"&::selection\": {\n      color: \"var(--textColor)\",\n    },\n  },\n});\nconst useLabelStyles = makeStyles({\n  root: {\n    color: \"var(--textColor)\",\n    \"&.Mui-focused\": {\n      color: \"var(--primary)\",\n    },\n  },\n});\n\nconst TextInput = React.forwardRef(function OutlinedInput(props, ref) {\n  const classes = useStyles();\n  const labelClasses = useLabelStyles();\n  const {\n    fullWidth = false,\n    inputComponent = \"input\",\n    label,\n    labelText = label,\n    labelWidth = 0,\n    multiline = false,\n    notched,\n    type,\n    value,\n    ...other\n  } = props;\n\n  return (\n    <ThemeProvider theme={theme}>\n      <TextField\n        margin=\"normal\"\n        variant=\"outlined\"\n        label={label}\n        labelText={label}\n        fullWidth\n        InputProps={{ classes: classes, notched: false }}\n        InputLabelProps={{ classes: labelClasses }}\n        inputComponent={inputComponent}\n        multiline={multiline}\n        ref={ref}\n        type={type}\n        {...other}\n      />\n    </ThemeProvider>\n  );\n});\n\nexport default TextInput;\n","import { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport FirebaseContext from \"../context/firebase\";\r\nimport * as ROUTES from \"../constants/routes\";\r\nimport { Logo } from \"../components/icons\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\nimport TextInput from \"../components/TextInput/TextInput\";\r\nimport { Formik } from \"formik\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nexport default function Login() {\r\n  const validate = (values) => {\r\n    let errors = {};\r\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\r\n  \r\n    if (!values.email) {\r\n      errors.email = \"Email address is required\";\r\n    } else if (!regex.test(values.email)) {\r\n      errors.email = \"Email address is invalid\";\r\n    }\r\n  \r\n    if (!values.password) {\r\n      errors.password = \"Password is required\";\r\n    } else if (values.password.length < 4) {\r\n      errors.password = \"Password too short\";\r\n    }\r\n  \r\n    return errors;\r\n  };\r\n  const handleSignin = (e) => {\r\n    e.preventDefault();\r\n    setError(\"\");\r\n    setLoading(true);\r\n    const email = emailRef.current.value;\r\n    const password = passwordRef.current.value;\r\n    signin(email, password)\r\n      .then((id) => {\r\n        setLoading(false);\r\n        history.push(`/home`);\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n    const history = useHistory();\r\n  const { firebase } = useContext(FirebaseContext);\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n\r\n  const [emailAddress, setEmailAddress] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\nconst [loading, setLoading] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const isInvalid = password === \"\" || emailAddress === \"\";\r\n  const { signin, facebookLogin } = useAuth();\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      await firebase.auth().signInWithEmailAndPassword(emailAddress, password);\r\n      history.push(ROUTES.DASHBOARD);\r\n    } catch (error) {\r\n      setEmailAddress(\"\");\r\n      setPassword(\"\");\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = \"Login - FireLucent\";\r\n  }, []);\r\n\r\n  return (\r\n    <Formik\r\n    initialValues={initialValues}\r\n    validate={validate}\r\n    onSubmit={handleSignin}\r\n  >\r\n    {(formik) => {\r\n      const {\r\n        values,\r\n        handleChange,\r\n        handleSubmit,\r\n        errors,\r\n        touched,\r\n        handleBlur,\r\n        isValid,\r\n        dirty,\r\n      } = formik;\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"panel\">\r\n            <div className=\"panelHeader\">\r\n              <Logo width={39} fill=\"white\" />\r\n              <span className=\"panelHeaderText\">Log in</span>\r\n\r\n              <form onSubmit={(e) => handleSignin(e)}>\r\n                <TextInput\r\n                  name=\"email\"\r\n                  inputPlaceholder=\"Mobile Number or Email\"\r\n                  autoFocus\r\n                  inputType=\"email\"\r\n                  label=\"Mobile Number or Email\"\r\n                  inputRef={emailRef}\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                formHelperText=\"Email\"\r\n                  className={\r\n                    errors.email && touched.email ? \"input-error\" : null\r\n                  }\r\n\r\n                  inputRequired={true}\r\n                />{\" \"}\r\n                {errors.email && touched.email && (\r\n                  <span className=\"error\">{errors.email}</span>\r\n                )}\r\n                <TextInput\r\n                  name=\"password\"\r\n                  inputPlaceholder=\"Password\"\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  value={values.password}\r\n                  inputRef={passwordRef}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  inputRequired={true}\r\n                />{\" \"}\r\n                {errors.password && touched.password && (\r\n                  <span className=\"error\">{errors.password}</span>\r\n                )}\r\n                <div className=\"\"></div>\r\n                {error && (\r\n                  <span className=\"error\">Incorrect email or password</span>\r\n                )}{\" \"}\r\n                <br />\r\n                <button className=\"defaultBtn\">Sign in</button>\r\n                <div className=\"loginLinks\">\r\n                  <Link to=\"/\">\r\n                    <span className=\"link\">Forgot password?</span>\r\n                  </Link>{\" \"}\r\n                  <span> {\" · \"} </span>\r\n                  <Link to=\"/signup\">\r\n                    <span className=\"link\">Create an account </span>\r\n                  </Link>\r\n                  <div className=\"signUp\">\r\n                    <p className=\"spanText\">\r\n                      By signing up, you are agree that you are an awesome\r\n                      person. 💖🔥\r\n                    </p>\r\n                  </div>{\" \"}\r\n                </div>{\" \"}\r\n              </form>\r\n            </div>{\" \"}\r\n          </div>\r\n        </div>\r\n      );\r\n    }}\r\n  </Formik>\r\n  );\r\n}\r\n"],"sourceRoot":""}